-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Apr 13, 2023 at 12:34 PM
-- Server version: 10.1.38-MariaDB
-- PHP Version: 5.6.40

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `aexon`
--

-- --------------------------------------------------------

--
-- Table structure for table `contract`
--

CREATE TABLE `contract` (
  `Sn` int(11) NOT NULL,
  `Name` text NOT NULL,
  `Email` varchar(50) NOT NULL,
  `Phone_num` int(50) NOT NULL,
  `Mes` text NOT NULL,
  `Date` datetime DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contract`
--

INSERT INTO `contract` (`Sn`, `Name`, `Email`, `Phone_num`, `Mes`, `Date`) VALUES
(1, 'afasf', 'ad@gmail.com', 24, 'safsf', '2023-04-12 17:14:34');

-- --------------------------------------------------------

--
-- Table structure for table `contracts`
--

CREATE TABLE `contracts` (
  `sno` int(11) NOT NULL,
  `name` varchar(80) NOT NULL,
  `phone_num` varchar(12) NOT NULL,
  `msg` varchar(120) NOT NULL,
  `date` varchar(12) DEFAULT NULL,
  `email` varchar(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contracts`
--

INSERT INTO `contracts` (`sno`, `name`, `phone_num`, `msg`, `date`, `email`) VALUES
(1, 'Adarsha Paudyal', '9849525211', 'dsgsdg', '2023-04-12 2', 'adarsha@telegmail.co'),
(2, 'Adarsha Paudyal', '9849525211', 'k xa hoi', '2023-04-12 2', 'adarshapaudyal01@gma'),
(3, 'Don', '9849525211', 'hey bro', '2023-04-12 2', 'adarsha@telegmail.co');

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `Sn` int(11) NOT NULL,
  `Title` text NOT NULL,
  `tagline` text NOT NULL,
  `slag` varchar(30) NOT NULL,
  `Content` text NOT NULL,
  `img_file` varchar(12) NOT NULL,
  `Date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`Sn`, `Title`, `tagline`, `slag`, `Content`, `img_file`, `Date`) VALUES
(1, 'Let\'s Learn Flasks', '', '', '', '', '2023-04-13 13:13:43'),
(2, 'Let\'s do CSS!!', 'Css in 1 hrs.', 'css-post', 'Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML (including XML dialects such as SVG, MathML or XHTML).[1] CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.[2]\r\n\r\nCSS is designed to enable the separation of content and presentation, including layout, colors, and fonts.[3] This separation can improve content accessibility; provide more flexibility and control in the specification of presentation characteristics; enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file, which reduces complexity and repetition in the structural content; and enable the .css file to be cached to improve the page load speed between the pages that share the file and its formatting.\r\n\r\nSeparation of formatting and content also makes it feasible to present the same markup page in different styles for different rendering methods, such as on-screen, in print, by voice (via speech-based browser or screen reader), and on Braille-based tactile devices. CSS also has rules for alternate formatting if the content is accessed on a mobile device.[4]\r\n\r\nThe name cascading comes from the specified priority scheme to determine which style rule applies if more than one rule matches a particular element. This cascading priority scheme is predictable.\r\n\r\nThe CSS specifications are maintained by the World Wide Web Consortium (W3C). Internet media type (MIME type) text/css is registered for use with CSS by RFC 2318 (March 1998). The W3C operates a free CSS validation service for CSS documents.[5]\r\n\r\nIn addition to HTML, other markup languages support the use of CSS including XHTML, plain XML, SVG, and XUL. CSS is also used in GTK widget toolkit.\r\n\r\nSyntax\r\nCSS has a simple syntax and uses a number of English keywords to specify the names of various style properties.\r\n\r\nA style sheet consists of a list of rules. Each rule or rule-set consists of one or more selectors, and a declaration block.\r\n\r\nSelector\r\n\"CSS class\" redirects here. For non-CSS use of element classes in HTML, see class attribute (HTML).\r\nIn CSS, selectors declare which part of the markup a style applies to by matching tags and attributes in the markup itself.\r\n\r\nSelectors may apply to the following:\r\n\r\nall elements of a specific type, e.g. the second-level headers h2\r\nelements specified by attribute, in particular:\r\nid: an identifier unique within the document, denoted in the selector language by a hash prefix e.g. #id\r\nclass: an identifier that can annotate multiple elements in a document, denoted by a dot prefix e.g. .classname (the phrase \"CSS class\", although sometimes used, is a misnomer, as element classes—specified with the HTML class attribute—is a markup feature that is distinct from browsers\' CSS subsystem and the related W3C/WHATWG standards work on document styles; see RDF and microformats for the origins of the \"class\" system of the Web content model)\r\nelements depending on how they are placed relative to others in the document tree.\r\nClasses and IDs are case-sensitive, start with letters, and can include alphanumeric characters, hyphens, and underscores. A class may apply to any number of instances of any element. An ID may only be applied to a single element.\r\n\r\nPseudo-classes are used in CSS selectors to permit formatting based on information that is not contained in the document tree. One example of a widely used pseudo-class is :hover, which identifies content only when the user \"points to\" the visible element, usually by holding the mouse cursor over it. It is appended to a selector as in a:hover or #elementid:hover. A pseudo-class classifies document elements, such as :link or :visited, whereas a pseudo-element makes a selection that may consist of partial elements, such as ::first-line or ::first-letter.[6] Note the double-colon notation for pseudo-elements versus single-colon notation for pseudo-class.\r\n\r\nSelectors may be combined in many ways to achieve great specificity and flexibility.[7] Multiple selectors may be joined in a spaced list to specify elements by location, element type, id, class, or any combination thereof. The order of the selectors is important. For example, div .myClass {color: red;} applies to all elements of class myClass that are inside div elements, whereas .myClass div {color: red;} applies to all div elements that are inside elements of class myClass. This is not to be confused with concatenated identifiers such as div.myClass {color: red;} which applies to div elements of class myClass.\r\n\r\nThe following table provides a summary of selector syntax indicating usage and the version of CSS that introduced it.[8]\r\n\r\nPattern	Matches	First defined\r\nin CSS level\r\nE	an element of type E	1\r\nE:link	an E element that is the source anchor of a hyperlink whose target is either not yet visited (:link) or already visited (:visited)	1\r\nE:active	an E element during certain user actions	1\r\nE::first-line	the first formatted line of an E element	1\r\nE::first-letter	the first formatted letter of an E element	1\r\n.c	all elements with class=\"c\"	1\r\n#myid	the element with id=\"myid\"	1\r\nE.warning	an E element whose class is \"warning\" (the document language specifies how class is determined)	1\r\nE#myid	an E element with ID equal to \"myid\"	1\r\n.c#myid	the element with class=\"c\" and ID equal to \"myid\"	1\r\nE F	an F element descendant of an E element	1\r\n*	any element	2\r\nE[foo]	an E element with a \"foo\" attribute	2\r\nE[foo=\"bar\"]	an E element whose \"foo\" attribute value is exactly equal to \"bar\"	2\r\nE[foo~=\"bar\"]	an E element whose \"foo\" attribute value is a list of whitespace-separated values, one of which is exactly equal to \"bar\"	2\r\nE[foo|=\"en\"]	an E element whose \"foo\" attribute has a hyphen-separated list of values beginning (from the left) with \"en\"	2\r\nE:first-child	an E element, first child of its parent	2\r\nE:lang(fr)	an element of type E in language \"fr\" (the document language specifies how language is determined)	2\r\nE::before	generated content before an E element\'s content	2\r\nE::after	generated content after an E element\'s content	2\r\nE > F	an F element child of an E element	2\r\nE + F	an F element immediately preceded by an E element	2\r\nE[foo^=\"bar\"]	an E element whose \"foo\" attribute value begins exactly with the string \"bar\"	3\r\nE[foo$=\"bar\"]	an E element whose \"foo\" attribute value ends exactly with the string \"bar\"	3\r\nE[foo*=\"bar\"]	an E element whose \"foo\" attribute value contains the substring \"bar\"	3\r\nE:root	an E element, root of the document	3\r\nE:nth-child(n)	an E element, the n-th child of its parent	3\r\nE:nth-last-child(n)	an E element, the n-th child of its parent, counting from the last one	3\r\nE:nth-of-type(n)	an E element, the n-th sibling of its type	3\r\nE:nth-last-of-type(n)	an E element, the n-th sibling of its type, counting from the last one	3\r\nE:last-child	an E element, last child of its parent	3\r\nE:first-of-type	an E element, first sibling of its type	3\r\nE:last-of-type	an E element, last sibling of its type	3\r\nE:only-child	an E element, only child of its parent	3\r\nE:only-of-type	an E element, only sibling of its type	3\r\nE:empty	an E element that has no children (including text nodes)	3\r\nE:target	an E element being the target of the referring URI	3\r\nE:enabled	a user interface element E that is enabled	3\r\nE:disabled	a user interface element E that is disabled	3\r\nE:checked	a user interface element E that is checked (for instance a radio button or checkbox)	3\r\nE:not(s)	an E element that does not match simple selector s	3\r\nE ~ F	an F element preceded by an E element	3\r\nDeclaration block\r\nA declaration block consists of a list of declarations in braces. Each declaration itself consists of a property, a colon (:), and a value. If there are multiple declarations in a block, a semi-colon (;) must be inserted to separate each declaration. An optional semi-colon after the last (or single) declaration may be used.[9]\r\n\r\nProperties are specified in the CSS standard. Each property has a set of possible values. Some properties can affect any type of element, and others apply only to particular groups of elements.[10][11]\r\n\r\nValues may be keywords, such as \"center\" or \"inherit\", or numerical values, such as 200px (200 pixels), 50vw (50 percent of the viewport width) or 80% (80 percent of the parent element\'s width). Color values can be specified with keywords (e.g. \"red\"), hexadecimal values (e.g. #FF0000, also abbreviated as #F00), RGB values on a 0 to 255 scale (e.g. rgb(255, 0, 0)), RGBA values that specify both color and alpha transparency (e.g. rgba(255, 0, 0, 0.8)), or HSL or HSLA values (e.g. hsl(000, 100%, 50%), hsla(000, 100%, 50%, 80%)).[12]\r\n\r\nLength units\r\nNon-zero numeric values representing linear measures must include a length unit, which is either an alphabetic code or abbreviation, as in 200px or 50vw; or a percentage sign, as in 80%. Some units – cm (centimetre); in (inch); mm (millimetre); pc (pica); and pt (point) – are absolute, which means that the rendered dimension does not depend upon the structure of the page; others – em (em); ex (ex) and px (pixel)[clarification needed] – are relative, which means that factors such as the font size of a parent element can affect the rendered measurement. These eight units were a feature of CSS 1[13] and retained in all subsequent revisions. The proposed CSS Values and Units Module Level 3 will, if adopted as a W3C Recommendation, provide seven further length units: ch; Q; rem; vh; vmax; vmin; and vw.[14]\r\n\r\nUse\r\nBefore CSS, nearly all presentational attributes of HTML documents were contained within the HTML markup. All font colors, background styles, element alignments, borders, and sizes had to be explicitly described, often repeatedly, within the HTML. CSS lets authors move much of that information to another file, the style sheet, resulting in considerably simpler HTML.\r\n\r\nFor example, headings (h1 elements), sub-headings (h2), sub-sub-headings (h3), etc., are defined structurally using HTML. In print and on the screen, choice of font, size, color and emphasis for these elements is presentational.\r\n\r\nBefore CSS, document authors who wanted to assign such typographic characteristics to, say, all h2 headings had to repeat HTML presentational markup for each occurrence of that heading type. This made documents more complex, larger, and more error-prone and difficult to maintain. CSS allows the separation of presentation from structure. CSS can define color, font, text alignment, size, borders, spacing, layout and many other typographic characteristics, and can do so independently for on-screen and printed views. CSS also defines non-visual styles, such as reading speed and emphasis for aural text readers. The W3C has now deprecated the use of all presentational HTML markup.[15]\r\n\r\nFor example, under pre-CSS HTML, a heading element defined with red text would be written as:\r\n\r\n<h1><font color=\"red\">Chapter 1.</font></h1>\r\nUsing CSS, the same element can be coded using style properties instead of HTML presentational attributes:\r\n\r\n<h1 style=\"color: red;\">Chapter 1.</h1>\r\nThe advantages of this may not be immediately clear but the power of CSS becomes more apparent when the style properties are placed in an internal style element or, even better, an external CSS file. For example, suppose the document contains the style element:\r\n\r\n<style>\r\n    h1 {\r\n        color: red;\r\n    }\r\n</style>\r\nAll h1 elements in the document will then automatically become red without requiring any explicit code. If the author later wanted to make h1 elements blue instead, this could be done by changing the style element to:\r\n\r\n<style>\r\n    h1 {\r\n        color: blue;\r\n    }\r\n</style>\r\nrather than by laboriously going through the document and changing the color for each individual h1 element.\r\n\r\nThe styles can also be placed in an external CSS file, as described below, and loaded using syntax similar to:\r\n\r\n<link href=\"path/to/file.css\" rel=\"stylesheet\" type=\"text/css\">\r\nThis further decouples the styling from the HTML document and makes it possible to restyle multiple documents by simply editing a shared external CSS file.\r\n\r\nSources\r\nCSS information can be provided from various sources. These sources can be the web browser, the user, and the author. The information from the author can be further classified into inline, media type, importance, selector specificity, rule order, inheritance, and property definition. CSS style information can be in a separate document, or it can be embedded into an HTML document. Multiple style sheets can be imported. Different styles can be applied depending on the output device being used; for example, the screen version can be quite different from the printed version, so authors can tailor the presentation appropriately for each medium.\r\n\r\nThe style sheet with the highest priority controls the content display. Declarations not set in the highest priority source are passed on to a source of lower priority, such as the user agent style. The process is called cascading.\r\n\r\nOne of the goals of CSS is to allow users greater control over presentation. Someone who finds red italic headings difficult to read may apply a different style sheet. Depending on the browser and the website, a user may choose from various style sheets provided by the designers, or may remove all added styles, and view the site using the browser\'s default styling, or may override just the red italic heading style without altering other attributes. Browser extensions like Stylish and Stylus have been created to facilitate the management of such user style sheets.\r\n\r\nCSS priority scheme (highest to lowest)\r\nPriority	CSS source type	Description\r\n1	Importance	The \"!important\" annotation overwrites the previous priority types\r\n2	Inline	A style applied to an HTML element via HTML \"style\" attribute\r\n3	Media Type	A property definition applies to all media types unless a media-specific CSS is defined\r\n4	User defined	Most browsers have the accessibility feature: a user-defined CSS\r\n5	Selector specificity	A specific contextual selector (#heading p) overwrites generic definition\r\n6	Rule order	Last rule declaration has a higher priority\r\n7	Parent inheritance	If a property is not specified, it is inherited from a parent element\r\n8	CSS property definition in HTML document	CSS rule or CSS inline style overwrites a default browser value\r\n9	Browser default	The lowest priority: browser default value is determined by W3C initial value specifications\r\nSpecificity\r\nSpecificity refers to the relative weights of various rules.[16] It determines which styles apply to an element when more than one rule could apply. Based on the specification, a simple selector (e.g. H1) has a specificity of 1, class selectors have a specificity of 1,0, and ID selectors have a specificity of 1,0,0. Because the specificity values do not carry over as in the decimal system, commas are used to separate the \"digits\"[17] (a CSS rule having 11 elements and 11 classes would have a specificity of 11,11, not 121).\r\n\r\nThus the selectors of the following rule result in the indicated specificity:\r\n\r\nSelectors	Specificity\r\nh1 {color: white;}	0, 0, 0, 1\r\np em {color: green;}	0, 0, 0, 2\r\n.grape {color: red;}	0, 0, 1, 0\r\np.bright {color: blue;}	0, 0, 1, 1\r\np.bright em.dark {color: yellow;}	0, 0, 2, 2\r\n#id218 {color: brown;}	0, 1, 0, 0\r\nstyle=\" \"	1, 0, 0, 0\r\nExamples\r\nConsider this HTML fragment:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <style>\r\n            #xyz { color: blue; }\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <p id=\"xyz\" style=\"color: green;\">To demonstrate specificity</p>\r\n    </body>\r\n</html>', 'https://uplo', '2023-04-13 00:50:23'),
(3, 'Java', 'Java (software platform), JavaScript, or Javanese language.', 'java-post', 'Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers write once, run anywhere (WORA),[17] meaning that compiled Java code can run on all platforms that support Java without the need to recompile.[18] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but has fewer low-level facilities than either of them. The Java runtime provides dynamic capabilities (such as reflection and runtime code modification) that are typically not available in traditional compiled languages. As of 2019, Java was one of the most popular programming languages in use according to GitHub,[citation not found][19][20] particularly for client–server web applications, with a reported 9 million developers.[21]  Java was originally develo', 'java.jpg', '2023-04-13 12:55:15');
INSERT INTO `posts` (`Sn`, `Title`, `tagline`, `slag`, `Content`, `img_file`, `Date`) VALUES
(5, 'JavaScript', ' JavaScript engine', 'js-post', 'JavaScript (/?d???v?skr?pt/), often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. As of 2022, 98% of websites use JavaScript on the client side for webpage behavior, often incorporating third-party libraries. All major web browsers have a dedicated JavaScript engine to execute the code on users\' devices.  JavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard.[10] It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM).  The ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O.  JavaScript engines were originally used only in web browsers, but are now core components of some servers and a variety of applications. The most popular runtime system for this usage is Node.js.  Although Java and JavaScript are similar in name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design.  History Creation at Netscape The first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the nascent World Wide Web.[11] The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.[12][13]  During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a scripting language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java programming language, while also hiring Brendan Eich to embed the Scheme language.[6]  Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages.[5][6] Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December.[6][1][14]  The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was the hot new language, so Eich considered the JavaScript name a marketing ploy by Netscape.[15]  Adoption by Microsoft Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft reverse-engineered the Navigator interpreter to create its own, called JScript.[16]  JScript was first released in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Navigator.[17][18] These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos for several years.[17][19]  The rise of JScript In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997.  The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.[16]  Meanwhile, Microsoft gained an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer\'s market share reached 95%.[20] This meant that JScript became the de facto standard for client-side scripting on the Web.  Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on Ecma work. Thus ECMAScript 4 was mothballed.  Growth and standardization During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer.[21]  In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition.  Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools.  Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition.[22][23] The key innovation was just-in-time compilation (JIT),[24] so other browser vendors needed to overhaul their engines for JIT.[25]  In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.  Reaching maturity Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015.[26]  The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system.[27][28] As of 2018, Node had been used by millions of developers,[29] and npm had the most modules of any package manager in the world.[30]  The ECMAScript draft specification is currently maintained openly on GitHub, and editions are produced via regular annual snapshots.[31] Potential revisions to the language are vetted through a comprehensive proposal process.[32][33] Now, instead of edition numbers, developers check the status of upcoming features individually.[31]  The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.[34]  Trademark \"JavaScript\" is a trademark of Oracle Corporation in the United States.[35][36] The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009.[37]  Website client-side usage JavaScript is the dominant client-side scripting language of the Web, with 98% of all websites (mid–2022) using it for this purpose.[38] Scripts are embedded in or included from HTML documents and interact with the DOM. All major web browsers have a built-in JavaScript engine that executes the code on the user\'s device.  Examples of scripted behavior Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page. Web page animations, such as fading objects in and out, resizing, and moving them. Playing browser games. Controlling the playback of streaming media. Generating pop-up ads or alert boxes. Validating input values of a web form before the data is sent to a web server. Logging data about the user\'s behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization. Redirecting a user to another page. Storing and retrieving data on the user\'s device, via the storage or IndexedDB standards. Web libraries and frameworks Over 80% of websites use a third-party JavaScript library or web framework for their client-side scripting.[39]  jQuery is by far the most popular client-side library, used by over 75% of websites.[39] Facebook created the React library for its website and later released it as open source; other sites, including Twitter, now use it. Likewise, the Angular framework created by Google for its websites, including YouTube and Gmail, is now an open source project used by others.[39]  In contrast, the term \"Vanilla JS\" has been coined for websites not using any libraries or frameworks, instead relying entirely on standard JavaScript functionality.[40]  Other usage The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications.  Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft\'s Internet Information Services,[41][42] but they were small niches.[43] Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches.[43]  Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents[44] and GNOME Shell extensions written in JavaScript.[45]  JavaScript has recently begun to appear in some embedded systems, usually by leveraging Node.js.[46][47][48]  Features The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.  Imperative and structured JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.[49]  Weakly typed JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used.[50]  The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator The binary - operator always casts both operands to a number Both unary operators (+, -) always cast the operand to a number Values are cast to strings like the following:[50]  Strings are left as-is Numbers are converted to their string representation Arrays have their elements cast to strings after which they are joined by commas (,) Other objects are converted to the string [object Object] where Object is the name of the constructor of the object Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively.  JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency.[51][50] For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction.  JavaScript type conversions left operand	operator	right operand	result [] (empty array)	+	[] (empty array)	\"\" (empty string) [] (empty array)	+	{} (empty object)	\"[object Object]\" (string) false (boolean)	+	[] (empty array)	\"false\" (string) \"123\"(string)	+	1 (number)	\"1231\" (string) \"123\" (string)	-	1 (number)	122 (number) \"123\" (string)	-	\"abc\" (string)	NaN (number) Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If you wrap the expression in parentheses ({} + []) the curly brackets are interpreted as an empty object and the result of the expression is \"[object Object]\" as expected.[50]  Dynamic Typing JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string.[52] JavaScript supports various ways to test the type of objects, including duck typing.[53] Run-time evaluation JavaScript includes an eval function that can execute statements provided as strings at run-time. Object-orientation (prototype-based) Prototypal inheritance in JavaScript is described by Douglas Crockford as:  You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don\'t need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that?[54]  In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj[\'x\'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object\'s prototype inheritance chain) can be enumerated using a for...in loop.  Prototypes JavaScript uses prototypes where many other object-oriented languages use classes for inheritance.[55] It is possible to simulate many class-based features with prototypes in JavaScript.[56] Functions as object constructors Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype).[57] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null).[58] The constructor\'s prototype property determines the object used for the new object\'s internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript\'s built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.[59] Functions as methods Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling: when a function is called as a method of an object, the function\'s local this keyword is bound to that object for that invocation. Functional JavaScript functions are first-class; a function is considered to be an object.[60] As such, a function may have properties and methods, such as .call() and .bind().[61] A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.[62] JavaScript also supports anonymous functions.  Delegative JavaScript supports implicit and explicit delegation.  Functions as roles (Traits and Mixins) JavaScript natively supports various function-based implementations of Role[63] patterns like Traits[64][65] and Mixins.[66] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain. Object composition and inheritance Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object\'s context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions. Miscellaneous JavaScript is a zero-index language.  Run-time environment JavaScript typically relies on a run-time environment (e.g., a web browser) to provide objects and methods by which scripts can interact with the environment (e.g., a web page DOM). These environments are single-threaded. JavaScript also relies on the run-time environment to provide the ability to include/import scripts (e.g., HTML <script> elements). This is not a language feature per se, but it is common in most JavaScript implementations. JavaScript processes messages from a queue one at a time. JavaScript calls a function associated with each new message, creating a call stack frame with the function\'s arguments and local variables. The call stack shrinks and grows based on the function\'s needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language\'s concurrency model describes the event loop as non-blocking: program input/output is performed using events and callback functions. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.[67] Variadic functions An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method. Array and object literals Like many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format. Regular expressions JavaScript also supports regular expressions in a manner similar to Perl, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[68] Promises and Async/await JavaScript supports promises and Async/await for handling asynchronous operations. A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action\'s eventual result. Recently, combinator methods were introduced in the JavaScript specification, which allows developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any. Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similar to traditional synchronous, blocking code. Vendor-specific extensions Historically, some JavaScript engines supported these non-standard features:  conditional catch clauses (like Java) array comprehensions and generator expressions (like Python) concise function expressions (function(args) expr; this experimental syntax predated arrow functions) ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[69]) Syntax Main article: JavaScript syntax Simple examples Variables in JavaScript can be defined using either the var,[70] let[71] or const[72] keywords. Variables defined without keywords will be defined at the global scope.  // Declares a function-scoped variable named `x`, and implicitly assigns the // special value `undefined` to it. Variables without value are automatically // set to undefined. // var is generally considered bad practice and let and const are usually preferred. var x;  // Variables can be manually set to `undefined` like so let x2 = undefined;  // Declares a block-scoped variable named `y`, and implicitly sets it to // `undefined`. The `let` keyword was introduced in ECMAScript 2015. let y;  // Declares a block-scoped, un-reassignable variable named `z`, and sets it to // a string literal. The `const` keyword was also introduced in ECMAScript 2015, // and must be explicitly assigned to.  // The keyword `const` means constant, hence the variable cannot be reassigned // as the value is `constant`. const z = \"this value cannot be reassigned!\";  // Declares a global-scoped variable and assigns 3.  This is generally considered // bad practice, and will not work if strict mode is on. t = 3;  // Declares a variable named `myNumber`, and assigns a number literal (the value // `2`) to it. let myNumber = 2;  // Reassigns `myNumber`, setting it to a string literal (the value `\"foo\"`). // JavaScript is a dynamically-typed language, so this is legal. myNumber = \"foo\"; Note the comments in the example above, all of which were preceded with two forward slashes.  There is no built-in Input/output functionality in JavaScript, instead it is provided by the run-time environment. The ECMAScript specification in edition 5.1 mentions that \"there are no provisions in this specification for input of external data or output of computed results\".[73] However, most runtime environments have a console object that can be used to print output.[74] Here is a minimalist Hello World program in JavaScript in a runtime environment with a console object:  console.log(\"Hello, World!\"); In HTML documents, a program like this is required for an output:  // Text nodes can be made using the \"write\" method. // This is frowned upon, as it can overwrite the document if the document is fully loaded. document.write(\'foo\');  // Elements can be made too. First, they have to be created in the DOM. const myElem = document.createElement(\'span\');  // Attributes like classes and the id can be set as well myElem.classList.add(\'foo\'); myElem.id = \'bar\';  // After setting this, the tag will look like this: `<span class=\"foo\" id=\"bar\" data-attr=\"baz\"></span>` myElem.setAttribute(\'data-attr\', \'baz\'); // Which could also be written as `myElem.dataset.attr = \'baz\'`  // Finally append it as a child element to the <body> in the HTML document.body.appendChild(myElem);  // Elements can be imperatively grabbed with querySelector for one element, or querySelectorAll for multiple elements that can be looped with forEach document.querySelector(\'.class\'); // Selects the first element with the \"class\" class document.querySelector(\'#id\'); // Selects the first element with an `id` of \"id\" document.querySelector(\'[data-other]\'); // Selects the first element with the \"data-other\" attribute document.querySelectorAll(\'.multiple\'); // Returns an Array of all elements with the \"multiple\" class A simple recursive function to calculate the factorial of a natural number:  function factorial(n) {     // Checking the argument for legitimacy. Factorial is defined for positive integers.     if (isNaN(n)) {         console.error(\"Non-numerical argument not allowed.\");         return NaN; // The special value: Not a Number     }     if (n === 0)         return 1; // 0! = 1     if (n < 0)         return undefined; // Factorial of negative numbers is not defined.     if (n % 1) {         console.warn(`${n} will be rounded to the closest integer. For non-integers consider using gamma function instead.`);         n = Math.round(n);     }     // The above checks need not be repeated in the recursion, hence defining the actual recursive part separately below.      // The following line is a function expression to recursively compute the factorial. It uses the arrow syntax introduced in ES6.     const recursivelyCompute = a => a > 1 ? a * recursivelyCompute(a - 1) : 1; // Note the use of the ternary operator `?`.     return recursivelyCompute(n); }  factorial(3); // Returns 6 An anonymous function (or lambda):  const counter = function() {     let count = 0;     return function() {         return ++count;     } };  const x = counter(); x(); // Returns 1 x(); // Returns 2 x(); // Returns 3 This example shows that, in JavaScript, function closures capture their non-local variables by reference.  Arrow functions were first introduced in 6th Edition - ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately.  Example of arrow function:  // Arrow functions let us omit the `function` keyword. // Here `long_example` points to an anonymous function value. const long_example = (input1, input2) => {     console.log(\"Hello, World!\");     const output = input1 + input2;      return output; };  // If there are no braces, the arrow function simply returns the expression // So here it\'s (input1 + input2) const short_example = (input1, input2) => input1 + input2;  long_example(2, 3); // Prints \"Hello, World!\" and returns 5 short_example(2, 5);  // Returns 7  // If an arrow function has only one parameter, the parentheses can be removed. const no_parentheses = input => input + 2;  no_parentheses(3); // Returns 5  // An arrow function, like other function definitions, can be executed in the same statement as they are created. // This is useful when writing libraries to avoid filling the global scope, and for closures. let three = ((a, b) => a + b) (1, 2);  const generate_multiplier_function = a => (b => isNaN(b) || !b ? a : a*=b); const five_multiples = generate_multiplier_function(5); // The supplied argument \"seeds\" the expression and is retained by a. five_multiples(1); // Returns 5 five_multiples(3); // Returns 15 five_multiples(4); // Returns 60 In JavaScript, objects can be created as instances of a class.  Object class example:  class Ball {     constructor(radius) {       this.radius = radius;       this.area = Math.PI * ( radius ** 2 );    }     // Classes (and thus objects) can contain functions known as methods    show() {       console.log(this.radius);    } };  const myBall = new Ball(5); // Creates a new instance of the ball object with radius 5 myBall.radius++; // Object properties can usually be modified from the outside myBall.show();   // Using the inherited \"show\" function logs \"6\" In JavaScript, objects can be instantiated directly from a function.  Object functional example:  function Ball(radius) {     const area = Math.PI * ( radius ** 2 );    const obj = { radius, area };     // Objects are mutable, and functions can be added as properties.    obj.show = () => console.log(obj.radius);    return obj; };  const myBall = Ball(5); // Creates a new ball object with radius 5. No \"new\" keyword needed. myBall.radius++; // The instance property can be modified. myBall.show();   // Using the \"show\" function logs \"6\" - the new instance value. Variadic function demonstration (arguments is a special variable):[75]  function sum() {     let x = 0;      for (let i = 0; i < arguments.length; ++i)         x += arguments[i];      return x; }  sum(1, 2); // Returns 3 sum(1, 2, 3); // Returns 6  // As of ES6, using the rest operator. function sum(...args) {     return args.reduce((a, b) => a + b); }  sum(1, 2); // Returns 3 sum(1, 2, 3); // Returns 6 Immediately-invoked function expressions are often used to create closures. Closures allow gathering properties and methods in a namespace and making some of them private:  let counter = (function() {     let i = 0; // Private property      return {   // Public methods         get: function() {             alert(i);         },         set: function(value) {             i = value;         },         increment: function() {             alert(++i);         }     }; })(); // Module  counter.get(); // Returns 0 counter.set(6); counter.increment(); // Returns 7 counter.increment(); // Returns 8 Generator objects (in the form of generator functions) provide a function which can be called, exited, and re-entered while maintaining internal context (statefulness).[76]  function* rawCounter() {     yield 1;     yield 2; }  function* dynamicCounter() {     let count = 0;     while (true) {         // It is not recommended to utilize while true loops in most cases.         yield ++count;     } }  // Instances const counter1 = rawCounter(); const counter2 = dynamicCounter();  // Implementation counter1.next(); // {value: 1, done: false} counter1.next(); // {value: 2, done: false} counter1.next(); // {value: undefined, done: true}  counter2.next(); // {value: 1, done: false} counter2.next(); // {value: 2, done: false} counter2.next(); // {value: 3, done: false} // ...infinitely  JavaScript can export and import from modules:[77]  Export example:  /* mymodule.js */ // This function remains private, as it is not exported let sum = (a, b) => {     return a + b; }  // Export variables export let name = \'Alice\'; export let age = 23;  // Export named functions export function add(num1, num2) {     return num1 + num2; }  // Export class export class Multiplication {     constructor(num1, num2) {         this.num1 = num1;         this.num2 = num2;     }      add() {         return sum(this.num1, this.num2);     } } Import example:  // Import one property import { add } from \'./mymodule.js\'; console.log(add(1, 2)); //> 3  // Import multiple properties import { name, age } from \'./mymodule.js\'; console.log(name, age); //> \"Alice\", 23  // Import all properties from a module import * from \'./module.js\' console.log(name, age); //> \"Alice\", 23 console.log(add(1,2)); //> 3 More advanced example This sample code displays various JavaScript features.  /* Finds the lowest common multiple (LCM) of two numbers */ function LCMCalculator(x, y) { // constructor function     if (isNaN(x*y)) throw new TypeError(\"Non-numeric arguments not allowed.\");     const checkInt = function(x) { // inner function         if (x % 1 !== 0)             throw new TypeError(x + \"is not an integer\");          return x;     };      this.a = checkInt(x)     //   semicolons   ^^^^  are optional, a newline is enough     this.b = checkInt(y); } // The prototype of object instances created by a constructor is // that constructor\'s \"prototype\" property. LCMCalculator.prototype = { // object literal     constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately     gcd: function() { // method that calculates the greatest common divisor         // Euclidean algorithm:         let a = Math.abs(this.a), b = Math.abs(this.b), t;          if (a < b) {             // swap variables             // t = b; b = a; a = t;             [a, b] = [b, a]; // swap using destructuring assignment (ES6)         }          while (b !== 0) {             t = b;             b = a % b;             a = t;         }          // Only need to calculate GCD once, so \"redefine\" this method.         // (Actually not redefinition—it\'s defined on the instance itself,         // so that this.gcd refers to this \"redefinition\" instead of LCMCalculator.prototype.gcd.         // Note that this leads to a wrong result if the LCMCalculator object members \"a\" and/or \"b\" are altered afterwards.)         // Also, \'gcd\' === \"gcd\", this[\'gcd\'] === this.gcd         this[\'gcd\'] = function() {             return a;         };          return a;     },      // Object property names can be specified by strings delimited by double (\") or single (\') quotes.     \"lcm\": function() {         // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.         // not using |this.a*this.b| to avoid FP precision issues         let lcm = this.a / this.gcd() * this.b;          // Only need to calculate lcm once, so \"redefine\" this method.         this.lcm = function() {             return lcm;         };          return lcm;     },      // Methods can also be declared using ES6 syntax     toString() {         // Using both ES6 template literals and the (+) operator to concatenate values         return `LCMCalculator: a = ${this.a}, b = ` + this.b;     } };  // Define generic output function; this implementation only works for Web browsers function output(x) {     document.body.appendChild(document.createTextNode(x));     document.body.appendChild(document.createElement(\'br\')); }  // Note: Array\'s map() and forEach() are defined in JavaScript 1.6. // They are used here to demonstrate JavaScript\'s inherent functional nature. [     [25, 55],     [21, 56],     [22, 58],     [28, 56] ].map(function(pair) { // array literal + mapping function     return new LCMCalculator(pair[0], pair[1]); }).sort((a, b) => a.lcm() - b.lcm()) // sort with this comparative function; => is a shorthand form of a function, called \"arrow function\"     .forEach(printResult);  function printResult(obj) {     output(obj + \", gcd = \" + obj.gcd() + \", lcm = \" + obj.lcm()); } The following output should be displayed in the browser window.  LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56 LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168 LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275 LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638 Security See also: Browser security JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one Website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.  There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements).[78][79] Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML.[80]  Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.  Cross-site vulnerabilities Main articles: Cross-site scripting and Cross-site request forgery A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim\'s authorization. A solution to XSS vulnerabilities is to use HTML escaping whenever displaying untrusted data.  Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS.  XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[81]  Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker\'s site tricks the victim\'s browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker\'s site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.  \"JavaScript hijacking\" is a type of CSRF attack in which a <script> tag on an attacker\'s site exploits a page on the victim\'s site that returns private information such as JSON or JavaScript. Possible solutions include:  requiring an authentication token in the POST and GET parameters for any response that returns private information. Misplaced trust in the client Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:  Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered. JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client. Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.[82] It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.[83] Misplaced trust in developers Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program\'s dependencies upon other developers\' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability.[84] \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\"[84] Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.[85][86]  Browser and plugin coding errors JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user\'s system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system\'s API with superuser privileges.  These flaws have affected major browsers including Firefox,[87] Internet Explorer,[88] and Safari.[89]  Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[90][91]  In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[92] Google Chrome similarly confines its page renderers to their own \"sandbox\".  Sandbox implementation errors Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.  Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer[93] and Firefox.[94] In Windows XP Service Pack 2, Microsoft demoted JScript\'s privileges in Internet Explorer.[95]  Microsoft Windows allows JavaScript source files on a computer\'s hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[96][failed verification]  Hardware vulnerabilities In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers.[97][98][99][100]  In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It\'s called \"ASLR?Cache\" or AnC.[101][102]  In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.[103]  Development tools Important tools have evolved with the language.  Every major web browser has built-in web development tools, including a JavaScript debugger. Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines. Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.[104][105] Many text editors have syntax highlighting support for JavaScript code. Related technologies Java A common misconception is that JavaScript is the same as Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed (when used inside a browser), and JavaScript was designed with Java\'s syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript\'s standard library follows Java\'s naming conventions, and JavaScript\'s Math and Date objects are based on classes from Java 1.0.[106]  Java and JavaScript both first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications.  The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript\'s typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java\'s objects are class-based, while JavaScript\'s are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme.  JSON JSON, or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript\'s object literal syntax.  TypeScript TypeScript (TS) is a strictly-typed variant of JavaScript. TS differs by introducing type annotations to variables and functions, and introducing a type language to describe the types within JS. Otherwise TS shares much the same featureset as JS, to allow it to be easily transpiled to JS for running client-side, and to interoperate with other JS code.[107]  WebAssembly Since 2017, web browsers have supported WebAssembly, a binary format that enables a JavaScript engine to execute performance-critical portions of web page scripts close to native speed.[108] WebAssembly code runs in the same sandbox as regular JavaScript code.  asm.js is a subset of JavaScript that served as the forerunner of WebAssembly.[109]   Transpilers JavaScript is the dominant client-side language of the Web, and many websites are script-heavy. Thus transpilers have been created to convert code written in other languages, which can aid the development process.[34]  References  \"Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet\" (Press release). December 4, 1995. Archived from the original on 2007-09-16.  \"ECMAScript® 2021 language specification\". June 2021. Retrieved 27 July 2021.  https://tc39.es/ecma262/; retrieved: 27 July 2021; publication date: 22 July 2021.  \"nodejs/node-eps\". GitHub. Archived from the original on 2020-08-29. Retrieved 2018-07-05.  Seibel, Peter (September 16, 2009). Coders at Work: Reflections on the Craft of Programming. ISBN 9781430219484. Archived from the original on December 24, 2020. Retrieved December 25, 2018. Eich: The immediate concern at Netscape was it must look like Java.  \"Chapter 4. How JavaScript Was Created\". speakingjs.com. Archived from the original on 2020-02-27. Retrieved 2017-11-21.  \"Popularity – Brendan Eich\".  \"Brendan Eich: An Introduction to JavaScript, JSConf 2010\". YouTube. p. 22m. Archived from the original on August 29, 2020. Retrieved November 25, 2019. Eich: \"function\", eight letters, I was influenced by AWK.  Eich, Brendan (1998). \"Foreword\". In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M.  \"ECMAScript® 2020 Language Specification\". Archived from the original on 2020-05-08. Retrieved 2020-05-08.  \"Bloomberg Game Changers: Marc Andreessen\". Bloomberg. Bloomberg. March 17, 2011. Archived from the original on May 16, 2012. Retrieved December 7, 2011.  Enzer, Larry (August 31, 2018). \"The Evolution of the Web Browsers\". Monmouth Web Developers. Archived from the original on August 31, 2018. Retrieved August 31, 2018.  Dickerson, Gordon (August 31, 2018). \"Learn the History of Web Browsers\". washingtonindependent.com. Retrieved August 31, 2018.  \"TechVision: Innovators of the Net: Brendan Eich and JavaScript\". Archived from the original on February 8, 2008.  Fin JS (June 17, 2016), Brendan Eich – CEO of Brave, archived from the original on February 10, 2019, retrieved February 7, 2018  \"Chapter 5. Standardization: ECMAScript\". speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021.  Champeon, Steve (April 6, 2001). \"JavaScript, How Did We Get Here?\". oreilly.com. Archived from the original on July 19, 2016. Retrieved July 16, 2016.  \"Microsoft Internet Explorer 3.0 Beta Now Available\". microsoft.com. Microsoft. May 29, 1996. Archived from the original on November 24, 2020. Retrieved July 16, 2016.  McCracken, Harry (September 16, 2010). \"The Unwelcome Return of \"Best Viewed with Internet Explorer\"\". technologizer.com. Archived from the original on June 23, 2018. Retrieved July 16, 2016.  Baker, Loren (November 24, 2004). \"Mozilla Firefox Internet Browser Market Share Gains to 7.4%\". Search Engine Journal. Archived from the original on May 7, 2021. Retrieved May 8, 2021.  Weber, Tim (May 9, 2005). \"The assault on software giant Microsoft\". BBC News. Archived from the original on September 25, 2017.  \"Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome\". PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on May 2, 2012. Retrieved June 28, 2010.  Purdy, Kevin (June 11, 2009). \"Lifehacker Speed Tests: Safari 4, Chrome 2\". Lifehacker. Archived from the original on April 14, 2021. Retrieved May 8, 2021.  \"TraceMonkey: JavaScript Lightspeed, Brendan Eich\'s Blog\". Archived from the original on December 4, 2015. Retrieved July 22, 2020.  \"Mozilla asks, \'Are we fast yet?\'\". Wired. Archived from the original on June 22, 2018. Retrieved January 18, 2019.  \"ECMAScript 6: New Features: Overview and Comparison\". es6-features.org. Archived from the original on March 18, 2018. Retrieved March 19, 2018.  Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012  Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012  Lawton, George (19 July 2018). \"The secret history behind the success of npm and Node\". TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021.  Brown, Paul (13 January 2017). \"State of the Union: npm\". Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021.  Branscombe, Mary (2016-05-04). \"JavaScript Standard Moves to Yearly Release Schedule; Here is What\'s New for ES16\". The New Stack. Archived from the original on 2021-01-16. Retrieved 2021-01-15.  \"The TC39 Process\". tc39.es. Ecma International. Archived from the original on 2021-02-07. Retrieved 2021-01-15.  \"ECMAScript proposals\". TC39. Archived from the original on 2020-12-04. Retrieved 2021-01-15.  Ashkenas, Jeremy. \"List of languages that compile to JS\". GitHub. Archived from the original on January 31, 2020. Retrieved February 6, 2020.  \"U.S. Trademark Serial No. 75026640\". uspto.gov. United States Patent and Trademark Office. 1997-05-06. Archived from the original on 2021-07-13. Retrieved 2021-05-08.  \"Legal Notices\". oracle.com. Oracle Corporation. Archived from the original on 2021-06-05. Retrieved 2021-05-08.  \"Oracle to buy Sun in $7.4-bn deal - The Economic Times\". The Economic Times.  \"Usage statistics of JavaScript as client-side programming language on websites\". w3techs.com. 2021-04-09. Archived from the original on 2022-02-13. Retrieved 2021-04-09.  \"Usage statistics of JavaScript libraries for websites\". w3techs.com. Archived from the original on 2012-05-26. Retrieved 2021-04-09.  \"Vanilla JS\". vanilla-js.com. 2020-06-16. Archived from the original on June 16, 2020. Retrieved June 17, 2020.  \"Server-Side JavaScript Guide\". oracle.com. Oracle Corporation. December 11, 1998. Archived from the original on March 11, 2021. Retrieved May 8, 2021.  Clinick, Andrew (July 14, 2000). \"Introducing JScript .NET\". Microsoft Developer Network. Microsoft. Archived from the original on November 10, 2017. Retrieved April 10, 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we\'ve been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP)  Mahemoff, Michael (December 17, 2009). \"Server-Side JavaScript, Back with a Vengeance\". readwrite.com. Archived from the original on June 17, 2016. Retrieved July 16, 2016.  \"JavaScript for Acrobat\". adobe.com. 2009-08-07. Archived from the original on August 7, 2009. Retrieved August 18, 2009.  treitter (2013-02-02). \"Answering the question: \"How do I develop an app for GNOME?\"\". livejournal.com. Archived from the original on 2013-02-11. Retrieved 2013-02-07.  \"Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel\". tessel.io. Archived from the original on 2021-05-26. Retrieved 2021-05-08.  \"Node.js Raspberry Pi GPIO Introduction\". w3schools.com. Archived from the original on 2021-08-13. Retrieved 2020-05-03.  \"Espruino – JavaScript for Microcontrollers\". espruino.com. Archived from the original on 2020-05-01. Retrieved 2020-05-03.  Flanagan, David (August 17, 2006). JavaScript: The Definitive Guide: The Definitive Guide. \"O\'Reilly Media, Inc.\". p. 16. ISBN 978-0-596-55447-7. Archived from the original on August 1, 2020. Retrieved March 29, 2019.  Korolev, Mikhail (2019-03-01). \"JavaScript quirks in one image from the Internet\". The DEV Community. Archived from the original on October 28, 2019. Retrieved October 28, 2019.  \"Wat\". www.destroyallsoftware.com. 2012. Archived from the original on October 28, 2019. Retrieved October 28, 2019.  \"JavaScript data types and data structures – JavaScript | MDN\". Developer.mozilla.org. February 16, 2017. Archived from the original on March 14, 2017. Retrieved February 24, 2017.  Flanagan 2006, pp. 176–178.  Crockford, Douglas. \"Prototypal Inheritance in JavaScript\". Archived from the original on 13 August 2013. Retrieved 20 August 2013.  \"Inheritance and the prototype chain\". Mozilla Developer Network. Mozilla. Archived from the original on April 25, 2013. Retrieved April 6, 2013.  Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6.  Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 95–97. ISBN 978-1-59327-282-1.  Katz, Yehuda (12 August 2011). \"Understanding \"Prototypes\" in JavaScript\". Archived from the original on 5 April 2013. Retrieved April 6, 2013.  Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125–127. ISBN 978-0-321-81218-6.  \"Function – JavaScript\". MDN Web Docs. Retrieved 2021-10-30.  \"Properties of the Function Object\". Es5.github.com. Archived from the original on January 28, 2013. Retrieved May 26, 2013.  Flanagan 2006, p. 141.  The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogpsot.de, April 11, 2014.  Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010.  \"Home | CocktailJS\". Cocktailjs.github.io. Archived from the original on February 4, 2017. Retrieved February 24, 2017.  Angus Croll, A fresh look at JavaScript Mixins Archived 2020-04-15 at the Wayback Machine, published May 31, 2011.  \"Concurrency model and Event Loop\". Mozilla Developer Network. Archived from the original on September 5, 2015. Retrieved August 28, 2015.  Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139–149. ISBN 978-1-59327-282-1.  \"E4X – Archive of obsolete content | MDN\". Mozilla Developer Network. Mozilla Foundation. February 14, 2014. Archived from the original on July 24, 2014. Retrieved July 13, 2014.  \"var – JavaScript – MDN\". The Mozilla Developer Network. Archived from the original on December 23, 2012. Retrieved December 22, 2012.  \"let\". MDN web docs. Mozilla. Archived from the original on May 28, 2019. Retrieved June 27, 2018.  \"const\". MDN web docs. Mozilla. Archived from the original on June 28, 2018. Retrieved June 27, 2018.  \"ECMAScript Language Specification – ECMA-262 Edition 5.1\". Ecma International. Archived from the original on November 26, 2012. Retrieved December 22, 2012.  \"console\". Mozilla Developer Network. Mozilla. Archived from the original on February 28, 2013. Retrieved April 6, 2013.  \"arguments\". Mozilla Developer Network. Mozilla. Archived from the original on April 13, 2013. Retrieved April 6, 2013.  \"function* - JavaScript | MDN\". developer.mozilla.org. Retrieved 2022-09-27.  \"JavaScript modules\". MDN Web Docs. Mozilla. Archived from the original on 17 July 2022. Retrieved 28 July 2022.  \"Making JavaScript Safe for Advertising\". ADsafe. Archived from the original on 2021-07-06. Retrieved 2021-05-08.  \"Secure ECMA Script (SES)\". Archived from the original on May 15, 2013. Retrieved May 26, 2013.  \"Google Caja Project\". Google. Archived from the original on 2021-01-22. Retrieved 2021-07-09.  \"Mozilla Cross-Site Scripting Vulnerability Reported and Fixed – MozillaZine Talkback\". Mozillazine.org. Archived from the original on July 21, 2011. Retrieved February 24, 2017.  Kottelin, Thor (17 June 2008). \"Right-click \"protection\"? Forget about it\". blog.anta.net. Archived from the original on 28 July 2022. Retrieved 28 July 2022.  Rehorik, Jan (29 November 2016). \"Why You Should Never Put Sensitive Data in Your JavaScript\". ServiceObjects Blog. ServiceObjects. Archived from the original on June 3, 2019. Retrieved June 3, 2019.  Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (December 21, 2016). Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (PDF). Northeastern University. arXiv:1811.00918. doi:10.14722/ndss.2017.23414. ISBN 978-1-891562-46-4. S2CID 17885720. Archived from the original (PDF) on 29 March 2017. Retrieved 28 July 2022.  Collins, Keith (March 27, 2016). \"How one programmer broke the internet by deleting a tiny piece of code\". Quartz. Archived from the original on February 22, 2017. Retrieved February 22, 2017.  SC Magazine UK, Developer\'s 11 lines of deleted code \'breaks the internet\' Archived February 23, 2017, at the Wayback Machine  Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine  Festa, Paul (August 19, 1998). \"Buffer-overflow bug in IE\". CNET. Archived from the original on December 25, 2002.  SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine  SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine  Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine  \"Protected Mode in Vista IE7 – IEBlog\". Blogs.msdn.com. February 9, 2006. Archived from the original on January 23, 2010. Retrieved February 24, 2017.  US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine  Mozilla Foundation, Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine  Andersen, Starr (2004-08-09). \"Part 5: Enhanced Browsing Security\". TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 2021-10-20.  For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine  Gruss, Daniel; Maurice, Clémentine; Mangard, Stefan (July 24, 2015). \"Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript\". arXiv:1507.06955 [cs.CR].  Jean-Pharuns, Alix (July 30, 2015). \"Rowhammer.js Is the Most Ingenious Hack I\'ve Ever Seen\". Motherboard. Vice. Archived from the original on January 27, 2018. Retrieved January 26, 2018.  Goodin, Dan (August 4, 2015). \"DRAM \'Bitflipping\' exploit for attacking PCs: Just add JavaScript\". Ars Technica. Archived from the original on January 27, 2018. Retrieved January 26, 2018.  Auerbach, David (July 28, 2015). \"Rowhammer security exploit: Why a new security attack is truly terrifying\". slate.com. Archived from the original on July 30, 2015. Retrieved July 29, 2015.  AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017  New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017  Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack  \"Benchmark.js\". benchmarkjs.com. Archived from the original on 2016-12-19. Retrieved 2016-11-06.  JSBEN.CH. \"JSBEN.CH Performance Benchmarking Playground for JavaScript\". jsben.ch. Archived from the original on 2021-02-27. Retrieved 2021-08-13.  Eich, Brendan (April 3, 2008). \"Popularity\". Archived from the original on July 3, 2011. Retrieved January 19, 2012.  \"TypeScript: JavaScript With Syntax For Types\". Typescriptlang.org. Retrieved 2022-08-12.  \"Edge Browser Switches WebAssembly to \'On\' -- Visual Studio Magazine\". Visual Studio Magazine. Archived from the original on 2018-02-10. Retrieved 2018-02-09.  \"frequently asked questions\". asm.js. Archived from the original on June 4, 2014. Retrieved April 13, 2014. Further reading See also: ECMAScript Specification Documents Flanagan, David. JavaScript: The Definitive Guide. 7th edition. Sebastopol, California: O\'Reilly, 2020. Haverbeke, Marijn. Eloquent JavaScript. 3rd edition. No Starch Press, 2018. 472 pages. ISBN 978-1593279509.(download) Zakas, Nicholas. Principles of Object-Oriented JavaScript, 1st edition. No Starch Press, 2014. 120 pages. ISBN 978-1593275402. External links JavaScript at Wikipedia\'s sister projects Definitions from Wiktionary Media from Commons Textbooks from Wikibooks Resources from Wikiversity Documentation from MediaWiki Listen to this article (48 minutes) 48:22 Spoken Wikipedia icon This audio file was created from a revision of this article dated 20 August 2013, and does not reflect subsequent edits. (Audio help · More spoken articles) JavaScript at Curlie \"JavaScript: The First 20 Years\". Retrieved 2022-02-06. vte JavaScript vte Programming languages ComparisonTimelineHistory AdaALGOLAPLAssemblyBASICCC++C#Classic Visual BasicCOBOLErlangForthFortranGoHaskellJavaJavaScriptKotlinLispLuaMATLABMLObject PascalPascalPerlPHPPrologPythonRRubyRustSQLScratchShellSimulaSmalltalkSwiftVisual Basicmore...  Lists: AlphabeticalCategoricalGenerationalNon-English-based Category vte ECMAScript vte Web browsers vte Node.js Portal: icon Computer programming Authority control Edit this at Wikidata Categories: JavaScriptAmerican inventionsCross-platform softwareDynamically typed programming languagesFunctional languagesObject-based programming languagesHigh-level programming languagesProgramming languages created in 1995Programming languages with an ISO standardPrototype-based programming languagesScripting languagesWeb programming This page was last edited on 29 March 2023, at 06:22 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License 3.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.', 'js.jpg', '2023-04-13 13:11:43');
INSERT INTO `posts` (`Sn`, `Title`, `tagline`, `slag`, `Content`, `img_file`, `Date`) VALUES
(6, 'JavaScript', ' JavaScript engine', 'js-post', 'JavaScript (/?d???v?skr?pt/), often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. As of 2022, 98% of websites use JavaScript on the client side for webpage behavior, often incorporating third-party libraries. All major web browsers have a dedicated JavaScript engine to execute the code on users\' devices.  JavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard.[10] It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM).  The ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O.  JavaScript engines were originally used only in web browsers, but are now core components of some servers and a variety of applications. The most popular runtime system for this usage is Node.js.  Although Java and JavaScript are similar in name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design.  History Creation at Netscape The first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the nascent World Wide Web.[11] The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.[12][13]  During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a scripting language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java programming language, while also hiring Brendan Eich to embed the Scheme language.[6]  Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages.[5][6] Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December.[6][1][14]  The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was the hot new language, so Eich considered the JavaScript name a marketing ploy by Netscape.[15]  Adoption by Microsoft Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft reverse-engineered the Navigator interpreter to create its own, called JScript.[16]  JScript was first released in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Navigator.[17][18] These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos for several years.[17][19]  The rise of JScript In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997.  The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.[16]  Meanwhile, Microsoft gained an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer\'s market share reached 95%.[20] This meant that JScript became the de facto standard for client-side scripting on the Web.  Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on Ecma work. Thus ECMAScript 4 was mothballed.  Growth and standardization During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer.[21]  In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition.  Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools.  Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition.[22][23] The key innovation was just-in-time compilation (JIT),[24] so other browser vendors needed to overhaul their engines for JIT.[25]  In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.  Reaching maturity Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015.[26]  The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system.[27][28] As of 2018, Node had been used by millions of developers,[29] and npm had the most modules of any package manager in the world.[30]  The ECMAScript draft specification is currently maintained openly on GitHub, and editions are produced via regular annual snapshots.[31] Potential revisions to the language are vetted through a comprehensive proposal process.[32][33] Now, instead of edition numbers, developers check the status of upcoming features individually.[31]  The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.[34]  Trademark \"JavaScript\" is a trademark of Oracle Corporation in the United States.[35][36] The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009.[37]  Website client-side usage JavaScript is the dominant client-side scripting language of the Web, with 98% of all websites (mid–2022) using it for this purpose.[38] Scripts are embedded in or included from HTML documents and interact with the DOM. All major web browsers have a built-in JavaScript engine that executes the code on the user\'s device.  Examples of scripted behavior Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page. Web page animations, such as fading objects in and out, resizing, and moving them. Playing browser games. Controlling the playback of streaming media. Generating pop-up ads or alert boxes. Validating input values of a web form before the data is sent to a web server. Logging data about the user\'s behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization. Redirecting a user to another page. Storing and retrieving data on the user\'s device, via the storage or IndexedDB standards. Web libraries and frameworks Over 80% of websites use a third-party JavaScript library or web framework for their client-side scripting.[39]  jQuery is by far the most popular client-side library, used by over 75% of websites.[39] Facebook created the React library for its website and later released it as open source; other sites, including Twitter, now use it. Likewise, the Angular framework created by Google for its websites, including YouTube and Gmail, is now an open source project used by others.[39]  In contrast, the term \"Vanilla JS\" has been coined for websites not using any libraries or frameworks, instead relying entirely on standard JavaScript functionality.[40]  Other usage The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications.  Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft\'s Internet Information Services,[41][42] but they were small niches.[43] Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches.[43]  Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents[44] and GNOME Shell extensions written in JavaScript.[45]  JavaScript has recently begun to appear in some embedded systems, usually by leveraging Node.js.[46][47][48]  Features The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.  Imperative and structured JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.[49]  Weakly typed JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used.[50]  The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator The binary - operator always casts both operands to a number Both unary operators (+, -) always cast the operand to a number Values are cast to strings like the following:[50]  Strings are left as-is Numbers are converted to their string representation Arrays have their elements cast to strings after which they are joined by commas (,) Other objects are converted to the string [object Object] where Object is the name of the constructor of the object Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively.  JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency.[51][50] For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction.  JavaScript type conversions left operand	operator	right operand	result [] (empty array)	+	[] (empty array)	\"\" (empty string) [] (empty array)	+	{} (empty object)	\"[object Object]\" (string) false (boolean)	+	[] (empty array)	\"false\" (string) \"123\"(string)	+	1 (number)	\"1231\" (string) \"123\" (string)	-	1 (number)	122 (number) \"123\" (string)	-	\"abc\" (string)	NaN (number) Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If you wrap the expression in parentheses ({} + []) the curly brackets are interpreted as an empty object and the result of the expression is \"[object Object]\" as expected.[50]  Dynamic Typing JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string.[52] JavaScript supports various ways to test the type of objects, including duck typing.[53] Run-time evaluation JavaScript includes an eval function that can execute statements provided as strings at run-time. Object-orientation (prototype-based) Prototypal inheritance in JavaScript is described by Douglas Crockford as:  You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don\'t need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that?[54]  In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj[\'x\'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object\'s prototype inheritance chain) can be enumerated using a for...in loop.  Prototypes JavaScript uses prototypes where many other object-oriented languages use classes for inheritance.[55] It is possible to simulate many class-based features with prototypes in JavaScript.[56] Functions as object constructors Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype).[57] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null).[58] The constructor\'s prototype property determines the object used for the new object\'s internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript\'s built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.[59] Functions as methods Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling: when a function is called as a method of an object, the function\'s local this keyword is bound to that object for that invocation. Functional JavaScript functions are first-class; a function is considered to be an object.[60] As such, a function may have properties and methods, such as .call() and .bind().[61] A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.[62] JavaScript also supports anonymous functions.  Delegative JavaScript supports implicit and explicit delegation.  Functions as roles (Traits and Mixins) JavaScript natively supports various function-based implementations of Role[63] patterns like Traits[64][65] and Mixins.[66] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain. Object composition and inheritance Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object\'s context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions. Miscellaneous JavaScript is a zero-index language.  Run-time environment JavaScript typically relies on a run-time environment (e.g., a web browser) to provide objects and methods by which scripts can interact with the environment (e.g., a web page DOM). These environments are single-threaded. JavaScript also relies on the run-time environment to provide the ability to include/import scripts (e.g., HTML <script> elements). This is not a language feature per se, but it is common in most JavaScript implementations. JavaScript processes messages from a queue one at a time. JavaScript calls a function associated with each new message, creating a call stack frame with the function\'s arguments and local variables. The call stack shrinks and grows based on the function\'s needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language\'s concurrency model describes the event loop as non-blocking: program input/output is performed using events and callback functions. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.[67] Variadic functions An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method. Array and object literals Like many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format. Regular expressions JavaScript also supports regular expressions in a manner similar to Perl, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[68] Promises and Async/await JavaScript supports promises and Async/await for handling asynchronous operations. A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action\'s eventual result. Recently, combinator methods were introduced in the JavaScript specification, which allows developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any. Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similar to traditional synchronous, blocking code. Vendor-specific extensions Historically, some JavaScript engines supported these non-standard features:  conditional catch clauses (like Java) array comprehensions and generator expressions (like Python) concise function expressions (function(args) expr; this experimental syntax predated arrow functions) ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[69]) Syntax Main article: JavaScript syntax Simple examples Variables in JavaScript can be defined using either the var,[70] let[71] or const[72] keywords. Variables defined without keywords will be defined at the global scope.  // Declares a function-scoped variable named `x`, and implicitly assigns the // special value `undefined` to it. Variables without value are automatically // set to undefined. // var is generally considered bad practice and let and const are usually preferred. var x;  // Variables can be manually set to `undefined` like so let x2 = undefined;  // Declares a block-scoped variable named `y`, and implicitly sets it to // `undefined`. The `let` keyword was introduced in ECMAScript 2015. let y;  // Declares a block-scoped, un-reassignable variable named `z`, and sets it to // a string literal. The `const` keyword was also introduced in ECMAScript 2015, // and must be explicitly assigned to.  // The keyword `const` means constant, hence the variable cannot be reassigned // as the value is `constant`. const z = \"this value cannot be reassigned!\";  // Declares a global-scoped variable and assigns 3.  This is generally considered // bad practice, and will not work if strict mode is on. t = 3;  // Declares a variable named `myNumber`, and assigns a number literal (the value // `2`) to it. let myNumber = 2;  // Reassigns `myNumber`, setting it to a string literal (the value `\"foo\"`). // JavaScript is a dynamically-typed language, so this is legal. myNumber = \"foo\"; Note the comments in the example above, all of which were preceded with two forward slashes.  There is no built-in Input/output functionality in JavaScript, instead it is provided by the run-time environment. The ECMAScript specification in edition 5.1 mentions that \"there are no provisions in this specification for input of external data or output of computed results\".[73] However, most runtime environments have a console object that can be used to print output.[74] Here is a minimalist Hello World program in JavaScript in a runtime environment with a console object:  console.log(\"Hello, World!\"); In HTML documents, a program like this is required for an output:  // Text nodes can be made using the \"write\" method. // This is frowned upon, as it can overwrite the document if the document is fully loaded. document.write(\'foo\');  // Elements can be made too. First, they have to be created in the DOM. const myElem = document.createElement(\'span\');  // Attributes like classes and the id can be set as well myElem.classList.add(\'foo\'); myElem.id = \'bar\';  // After setting this, the tag will look like this: `<span class=\"foo\" id=\"bar\" data-attr=\"baz\"></span>` myElem.setAttribute(\'data-attr\', \'baz\'); // Which could also be written as `myElem.dataset.attr = \'baz\'`  // Finally append it as a child element to the <body> in the HTML document.body.appendChild(myElem);  // Elements can be imperatively grabbed with querySelector for one element, or querySelectorAll for multiple elements that can be looped with forEach document.querySelector(\'.class\'); // Selects the first element with the \"class\" class document.querySelector(\'#id\'); // Selects the first element with an `id` of \"id\" document.querySelector(\'[data-other]\'); // Selects the first element with the \"data-other\" attribute document.querySelectorAll(\'.multiple\'); // Returns an Array of all elements with the \"multiple\" class A simple recursive function to calculate the factorial of a natural number:  function factorial(n) {     // Checking the argument for legitimacy. Factorial is defined for positive integers.     if (isNaN(n)) {         console.error(\"Non-numerical argument not allowed.\");         return NaN; // The special value: Not a Number     }     if (n === 0)         return 1; // 0! = 1     if (n < 0)         return undefined; // Factorial of negative numbers is not defined.     if (n % 1) {         console.warn(`${n} will be rounded to the closest integer. For non-integers consider using gamma function instead.`);         n = Math.round(n);     }     // The above checks need not be repeated in the recursion, hence defining the actual recursive part separately below.      // The following line is a function expression to recursively compute the factorial. It uses the arrow syntax introduced in ES6.     const recursivelyCompute = a => a > 1 ? a * recursivelyCompute(a - 1) : 1; // Note the use of the ternary operator `?`.     return recursivelyCompute(n); }  factorial(3); // Returns 6 An anonymous function (or lambda):  const counter = function() {     let count = 0;     return function() {         return ++count;     } };  const x = counter(); x(); // Returns 1 x(); // Returns 2 x(); // Returns 3 This example shows that, in JavaScript, function closures capture their non-local variables by reference.  Arrow functions were first introduced in 6th Edition - ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately.  Example of arrow function:  // Arrow functions let us omit the `function` keyword. // Here `long_example` points to an anonymous function value. const long_example = (input1, input2) => {     console.log(\"Hello, World!\");     const output = input1 + input2;      return output; };  // If there are no braces, the arrow function simply returns the expression // So here it\'s (input1 + input2) const short_example = (input1, input2) => input1 + input2;  long_example(2, 3); // Prints \"Hello, World!\" and returns 5 short_example(2, 5);  // Returns 7  // If an arrow function has only one parameter, the parentheses can be removed. const no_parentheses = input => input + 2;  no_parentheses(3); // Returns 5  // An arrow function, like other function definitions, can be executed in the same statement as they are created. // This is useful when writing libraries to avoid filling the global scope, and for closures. let three = ((a, b) => a + b) (1, 2);  const generate_multiplier_function = a => (b => isNaN(b) || !b ? a : a*=b); const five_multiples = generate_multiplier_function(5); // The supplied argument \"seeds\" the expression and is retained by a. five_multiples(1); // Returns 5 five_multiples(3); // Returns 15 five_multiples(4); // Returns 60 In JavaScript, objects can be created as instances of a class.  Object class example:  class Ball {     constructor(radius) {       this.radius = radius;       this.area = Math.PI * ( radius ** 2 );    }     // Classes (and thus objects) can contain functions known as methods    show() {       console.log(this.radius);    } };  const myBall = new Ball(5); // Creates a new instance of the ball object with radius 5 myBall.radius++; // Object properties can usually be modified from the outside myBall.show();   // Using the inherited \"show\" function logs \"6\" In JavaScript, objects can be instantiated directly from a function.  Object functional example:  function Ball(radius) {     const area = Math.PI * ( radius ** 2 );    const obj = { radius, area };     // Objects are mutable, and functions can be added as properties.    obj.show = () => console.log(obj.radius);    return obj; };  const myBall = Ball(5); // Creates a new ball object with radius 5. No \"new\" keyword needed. myBall.radius++; // The instance property can be modified. myBall.show();   // Using the \"show\" function logs \"6\" - the new instance value. Variadic function demonstration (arguments is a special variable):[75]  function sum() {     let x = 0;      for (let i = 0; i < arguments.length; ++i)         x += arguments[i];      return x; }  sum(1, 2); // Returns 3 sum(1, 2, 3); // Returns 6  // As of ES6, using the rest operator. function sum(...args) {     return args.reduce((a, b) => a + b); }  sum(1, 2); // Returns 3 sum(1, 2, 3); // Returns 6 Immediately-invoked function expressions are often used to create closures. Closures allow gathering properties and methods in a namespace and making some of them private:  let counter = (function() {     let i = 0; // Private property      return {   // Public methods         get: function() {             alert(i);         },         set: function(value) {             i = value;         },         increment: function() {             alert(++i);         }     }; })(); // Module  counter.get(); // Returns 0 counter.set(6); counter.increment(); // Returns 7 counter.increment(); // Returns 8 Generator objects (in the form of generator functions) provide a function which can be called, exited, and re-entered while maintaining internal context (statefulness).[76]  function* rawCounter() {     yield 1;     yield 2; }  function* dynamicCounter() {     let count = 0;     while (true) {         // It is not recommended to utilize while true loops in most cases.         yield ++count;     } }  // Instances const counter1 = rawCounter(); const counter2 = dynamicCounter();  // Implementation counter1.next(); // {value: 1, done: false} counter1.next(); // {value: 2, done: false} counter1.next(); // {value: undefined, done: true}  counter2.next(); // {value: 1, done: false} counter2.next(); // {value: 2, done: false} counter2.next(); // {value: 3, done: false} // ...infinitely  JavaScript can export and import from modules:[77]  Export example:  /* mymodule.js */ // This function remains private, as it is not exported let sum = (a, b) => {     return a + b; }  // Export variables export let name = \'Alice\'; export let age = 23;  // Export named functions export function add(num1, num2) {     return num1 + num2; }  // Export class export class Multiplication {     constructor(num1, num2) {         this.num1 = num1;         this.num2 = num2;     }      add() {         return sum(this.num1, this.num2);     } } Import example:  // Import one property import { add } from \'./mymodule.js\'; console.log(add(1, 2)); //> 3  // Import multiple properties import { name, age } from \'./mymodule.js\'; console.log(name, age); //> \"Alice\", 23  // Import all properties from a module import * from \'./module.js\' console.log(name, age); //> \"Alice\", 23 console.log(add(1,2)); //> 3 More advanced example This sample code displays various JavaScript features.  /* Finds the lowest common multiple (LCM) of two numbers */ function LCMCalculator(x, y) { // constructor function     if (isNaN(x*y)) throw new TypeError(\"Non-numeric arguments not allowed.\");     const checkInt = function(x) { // inner function         if (x % 1 !== 0)             throw new TypeError(x + \"is not an integer\");          return x;     };      this.a = checkInt(x)     //   semicolons   ^^^^  are optional, a newline is enough     this.b = checkInt(y); } // The prototype of object instances created by a constructor is // that constructor\'s \"prototype\" property. LCMCalculator.prototype = { // object literal     constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately     gcd: function() { // method that calculates the greatest common divisor         // Euclidean algorithm:         let a = Math.abs(this.a), b = Math.abs(this.b), t;          if (a < b) {             // swap variables             // t = b; b = a; a = t;             [a, b] = [b, a]; // swap using destructuring assignment (ES6)         }          while (b !== 0) {             t = b;             b = a % b;             a = t;         }          // Only need to calculate GCD once, so \"redefine\" this method.         // (Actually not redefinition—it\'s defined on the instance itself,         // so that this.gcd refers to this \"redefinition\" instead of LCMCalculator.prototype.gcd.         // Note that this leads to a wrong result if the LCMCalculator object members \"a\" and/or \"b\" are altered afterwards.)         // Also, \'gcd\' === \"gcd\", this[\'gcd\'] === this.gcd         this[\'gcd\'] = function() {             return a;         };          return a;     },      // Object property names can be specified by strings delimited by double (\") or single (\') quotes.     \"lcm\": function() {         // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.         // not using |this.a*this.b| to avoid FP precision issues         let lcm = this.a / this.gcd() * this.b;          // Only need to calculate lcm once, so \"redefine\" this method.         this.lcm = function() {             return lcm;         };          return lcm;     },      // Methods can also be declared using ES6 syntax     toString() {         // Using both ES6 template literals and the (+) operator to concatenate values         return `LCMCalculator: a = ${this.a}, b = ` + this.b;     } };  // Define generic output function; this implementation only works for Web browsers function output(x) {     document.body.appendChild(document.createTextNode(x));     document.body.appendChild(document.createElement(\'br\')); }  // Note: Array\'s map() and forEach() are defined in JavaScript 1.6. // They are used here to demonstrate JavaScript\'s inherent functional nature. [     [25, 55],     [21, 56],     [22, 58],     [28, 56] ].map(function(pair) { // array literal + mapping function     return new LCMCalculator(pair[0], pair[1]); }).sort((a, b) => a.lcm() - b.lcm()) // sort with this comparative function; => is a shorthand form of a function, called \"arrow function\"     .forEach(printResult);  function printResult(obj) {     output(obj + \", gcd = \" + obj.gcd() + \", lcm = \" + obj.lcm()); } The following output should be displayed in the browser window.  LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56 LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168 LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275 LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638 Security See also: Browser security JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one Website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.  There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements).[78][79] Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML.[80]  Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.  Cross-site vulnerabilities Main articles: Cross-site scripting and Cross-site request forgery A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim\'s authorization. A solution to XSS vulnerabilities is to use HTML escaping whenever displaying untrusted data.  Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS.  XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[81]  Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker\'s site tricks the victim\'s browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker\'s site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.  \"JavaScript hijacking\" is a type of CSRF attack in which a <script> tag on an attacker\'s site exploits a page on the victim\'s site that returns private information such as JSON or JavaScript. Possible solutions include:  requiring an authentication token in the POST and GET parameters for any response that returns private information. Misplaced trust in the client Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:  Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered. JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client. Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.[82] It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.[83] Misplaced trust in developers Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program\'s dependencies upon other developers\' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability.[84] \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\"[84] Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.[85][86]  Browser and plugin coding errors JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user\'s system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system\'s API with superuser privileges.  These flaws have affected major browsers including Firefox,[87] Internet Explorer,[88] and Safari.[89]  Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[90][91]  In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[92] Google Chrome similarly confines its page renderers to their own \"sandbox\".  Sandbox implementation errors Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.  Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer[93] and Firefox.[94] In Windows XP Service Pack 2, Microsoft demoted JScript\'s privileges in Internet Explorer.[95]  Microsoft Windows allows JavaScript source files on a computer\'s hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[96][failed verification]  Hardware vulnerabilities In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers.[97][98][99][100]  In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It\'s called \"ASLR?Cache\" or AnC.[101][102]  In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.[103]  Development tools Important tools have evolved with the language.  Every major web browser has built-in web development tools, including a JavaScript debugger. Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines. Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.[104][105] Many text editors have syntax highlighting support for JavaScript code. Related technologies Java A common misconception is that JavaScript is the same as Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed (when used inside a browser), and JavaScript was designed with Java\'s syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript\'s standard library follows Java\'s naming conventions, and JavaScript\'s Math and Date objects are based on classes from Java 1.0.[106]  Java and JavaScript both first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications.  The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript\'s typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java\'s objects are class-based, while JavaScript\'s are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme.  JSON JSON, or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript\'s object literal syntax.  TypeScript TypeScript (TS) is a strictly-typed variant of JavaScript. TS differs by introducing type annotations to variables and functions, and introducing a type language to describe the types within JS. Otherwise TS shares much the same featureset as JS, to allow it to be easily transpiled to JS for running client-side, and to interoperate with other JS code.[107]  WebAssembly Since 2017, web browsers have supported WebAssembly, a binary format that enables a JavaScript engine to execute performance-critical portions of web page scripts close to native speed.[108] WebAssembly code runs in the same sandbox as regular JavaScript code.  asm.js is a subset of JavaScript that served as the forerunner of WebAssembly.[109]   Transpilers JavaScript is the dominant client-side language of the Web, and many websites are script-heavy. Thus transpilers have been created to convert code written in other languages, which can aid the development process.[34]  References  \"Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet\" (Press release). December 4, 1995. Archived from the original on 2007-09-16.  \"ECMAScript® 2021 language specification\". June 2021. Retrieved 27 July 2021.  https://tc39.es/ecma262/; retrieved: 27 July 2021; publication date: 22 July 2021.  \"nodejs/node-eps\". GitHub. Archived from the original on 2020-08-29. Retrieved 2018-07-05.  Seibel, Peter (September 16, 2009). Coders at Work: Reflections on the Craft of Programming. ISBN 9781430219484. Archived from the original on December 24, 2020. Retrieved December 25, 2018. Eich: The immediate concern at Netscape was it must look like Java.  \"Chapter 4. How JavaScript Was Created\". speakingjs.com. Archived from the original on 2020-02-27. Retrieved 2017-11-21.  \"Popularity – Brendan Eich\".  \"Brendan Eich: An Introduction to JavaScript, JSConf 2010\". YouTube. p. 22m. Archived from the original on August 29, 2020. Retrieved November 25, 2019. Eich: \"function\", eight letters, I was influenced by AWK.  Eich, Brendan (1998). \"Foreword\". In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M.  \"ECMAScript® 2020 Language Specification\". Archived from the original on 2020-05-08. Retrieved 2020-05-08.  \"Bloomberg Game Changers: Marc Andreessen\". Bloomberg. Bloomberg. March 17, 2011. Archived from the original on May 16, 2012. Retrieved December 7, 2011.  Enzer, Larry (August 31, 2018). \"The Evolution of the Web Browsers\". Monmouth Web Developers. Archived from the original on August 31, 2018. Retrieved August 31, 2018.  Dickerson, Gordon (August 31, 2018). \"Learn the History of Web Browsers\". washingtonindependent.com. Retrieved August 31, 2018.  \"TechVision: Innovators of the Net: Brendan Eich and JavaScript\". Archived from the original on February 8, 2008.  Fin JS (June 17, 2016), Brendan Eich – CEO of Brave, archived from the original on February 10, 2019, retrieved February 7, 2018  \"Chapter 5. Standardization: ECMAScript\". speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021.  Champeon, Steve (April 6, 2001). \"JavaScript, How Did We Get Here?\". oreilly.com. Archived from the original on July 19, 2016. Retrieved July 16, 2016.  \"Microsoft Internet Explorer 3.0 Beta Now Available\". microsoft.com. Microsoft. May 29, 1996. Archived from the original on November 24, 2020. Retrieved July 16, 2016.  McCracken, Harry (September 16, 2010). \"The Unwelcome Return of \"Best Viewed with Internet Explorer\"\". technologizer.com. Archived from the original on June 23, 2018. Retrieved July 16, 2016.  Baker, Loren (November 24, 2004). \"Mozilla Firefox Internet Browser Market Share Gains to 7.4%\". Search Engine Journal. Archived from the original on May 7, 2021. Retrieved May 8, 2021.  Weber, Tim (May 9, 2005). \"The assault on software giant Microsoft\". BBC News. Archived from the original on September 25, 2017.  \"Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome\". PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on May 2, 2012. Retrieved June 28, 2010.  Purdy, Kevin (June 11, 2009). \"Lifehacker Speed Tests: Safari 4, Chrome 2\". Lifehacker. Archived from the original on April 14, 2021. Retrieved May 8, 2021.  \"TraceMonkey: JavaScript Lightspeed, Brendan Eich\'s Blog\". Archived from the original on December 4, 2015. Retrieved July 22, 2020.  \"Mozilla asks, \'Are we fast yet?\'\". Wired. Archived from the original on June 22, 2018. Retrieved January 18, 2019.  \"ECMAScript 6: New Features: Overview and Comparison\". es6-features.org. Archived from the original on March 18, 2018. Retrieved March 19, 2018.  Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012  Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012  Lawton, George (19 July 2018). \"The secret history behind the success of npm and Node\". TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021.  Brown, Paul (13 January 2017). \"State of the Union: npm\". Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021.  Branscombe, Mary (2016-05-04). \"JavaScript Standard Moves to Yearly Release Schedule; Here is What\'s New for ES16\". The New Stack. Archived from the original on 2021-01-16. Retrieved 2021-01-15.  \"The TC39 Process\". tc39.es. Ecma International. Archived from the original on 2021-02-07. Retrieved 2021-01-15.  \"ECMAScript proposals\". TC39. Archived from the original on 2020-12-04. Retrieved 2021-01-15.  Ashkenas, Jeremy. \"List of languages that compile to JS\". GitHub. Archived from the original on January 31, 2020. Retrieved February 6, 2020.  \"U.S. Trademark Serial No. 75026640\". uspto.gov. United States Patent and Trademark Office. 1997-05-06. Archived from the original on 2021-07-13. Retrieved 2021-05-08.  \"Legal Notices\". oracle.com. Oracle Corporation. Archived from the original on 2021-06-05. Retrieved 2021-05-08.  \"Oracle to buy Sun in $7.4-bn deal - The Economic Times\". The Economic Times.  \"Usage statistics of JavaScript as client-side programming language on websites\". w3techs.com. 2021-04-09. Archived from the original on 2022-02-13. Retrieved 2021-04-09.  \"Usage statistics of JavaScript libraries for websites\". w3techs.com. Archived from the original on 2012-05-26. Retrieved 2021-04-09.  \"Vanilla JS\". vanilla-js.com. 2020-06-16. Archived from the original on June 16, 2020. Retrieved June 17, 2020.  \"Server-Side JavaScript Guide\". oracle.com. Oracle Corporation. December 11, 1998. Archived from the original on March 11, 2021. Retrieved May 8, 2021.  Clinick, Andrew (July 14, 2000). \"Introducing JScript .NET\". Microsoft Developer Network. Microsoft. Archived from the original on November 10, 2017. Retrieved April 10, 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we\'ve been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP)  Mahemoff, Michael (December 17, 2009). \"Server-Side JavaScript, Back with a Vengeance\". readwrite.com. Archived from the original on June 17, 2016. Retrieved July 16, 2016.  \"JavaScript for Acrobat\". adobe.com. 2009-08-07. Archived from the original on August 7, 2009. Retrieved August 18, 2009.  treitter (2013-02-02). \"Answering the question: \"How do I develop an app for GNOME?\"\". livejournal.com. Archived from the original on 2013-02-11. Retrieved 2013-02-07.  \"Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel\". tessel.io. Archived from the original on 2021-05-26. Retrieved 2021-05-08.  \"Node.js Raspberry Pi GPIO Introduction\". w3schools.com. Archived from the original on 2021-08-13. Retrieved 2020-05-03.  \"Espruino – JavaScript for Microcontrollers\". espruino.com. Archived from the original on 2020-05-01. Retrieved 2020-05-03.  Flanagan, David (August 17, 2006). JavaScript: The Definitive Guide: The Definitive Guide. \"O\'Reilly Media, Inc.\". p. 16. ISBN 978-0-596-55447-7. Archived from the original on August 1, 2020. Retrieved March 29, 2019.  Korolev, Mikhail (2019-03-01). \"JavaScript quirks in one image from the Internet\". The DEV Community. Archived from the original on October 28, 2019. Retrieved October 28, 2019.  \"Wat\". www.destroyallsoftware.com. 2012. Archived from the original on October 28, 2019. Retrieved October 28, 2019.  \"JavaScript data types and data structures – JavaScript | MDN\". Developer.mozilla.org. February 16, 2017. Archived from the original on March 14, 2017. Retrieved February 24, 2017.  Flanagan 2006, pp. 176–178.  Crockford, Douglas. \"Prototypal Inheritance in JavaScript\". Archived from the original on 13 August 2013. Retrieved 20 August 2013.  \"Inheritance and the prototype chain\". Mozilla Developer Network. Mozilla. Archived from the original on April 25, 2013. Retrieved April 6, 2013.  Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6.  Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 95–97. ISBN 978-1-59327-282-1.  Katz, Yehuda (12 August 2011). \"Understanding \"Prototypes\" in JavaScript\". Archived from the original on 5 April 2013. Retrieved April 6, 2013.  Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125–127. ISBN 978-0-321-81218-6.  \"Function – JavaScript\". MDN Web Docs. Retrieved 2021-10-30.  \"Properties of the Function Object\". Es5.github.com. Archived from the original on January 28, 2013. Retrieved May 26, 2013.  Flanagan 2006, p. 141.  The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogpsot.de, April 11, 2014.  Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010.  \"Home | CocktailJS\". Cocktailjs.github.io. Archived from the original on February 4, 2017. Retrieved February 24, 2017.  Angus Croll, A fresh look at JavaScript Mixins Archived 2020-04-15 at the Wayback Machine, published May 31, 2011.  \"Concurrency model and Event Loop\". Mozilla Developer Network. Archived from the original on September 5, 2015. Retrieved August 28, 2015.  Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139–149. ISBN 978-1-59327-282-1.  \"E4X – Archive of obsolete content | MDN\". Mozilla Developer Network. Mozilla Foundation. February 14, 2014. Archived from the original on July 24, 2014. Retrieved July 13, 2014.  \"var – JavaScript – MDN\". The Mozilla Developer Network. Archived from the original on December 23, 2012. Retrieved December 22, 2012.  \"let\". MDN web docs. Mozilla. Archived from the original on May 28, 2019. Retrieved June 27, 2018.  \"const\". MDN web docs. Mozilla. Archived from the original on June 28, 2018. Retrieved June 27, 2018.  \"ECMAScript Language Specification – ECMA-262 Edition 5.1\". Ecma International. Archived from the original on November 26, 2012. Retrieved December 22, 2012.  \"console\". Mozilla Developer Network. Mozilla. Archived from the original on February 28, 2013. Retrieved April 6, 2013.  \"arguments\". Mozilla Developer Network. Mozilla. Archived from the original on April 13, 2013. Retrieved April 6, 2013.  \"function* - JavaScript | MDN\". developer.mozilla.org. Retrieved 2022-09-27.  \"JavaScript modules\". MDN Web Docs. Mozilla. Archived from the original on 17 July 2022. Retrieved 28 July 2022.  \"Making JavaScript Safe for Advertising\". ADsafe. Archived from the original on 2021-07-06. Retrieved 2021-05-08.  \"Secure ECMA Script (SES)\". Archived from the original on May 15, 2013. Retrieved May 26, 2013.  \"Google Caja Project\". Google. Archived from the original on 2021-01-22. Retrieved 2021-07-09.  \"Mozilla Cross-Site Scripting Vulnerability Reported and Fixed – MozillaZine Talkback\". Mozillazine.org. Archived from the original on July 21, 2011. Retrieved February 24, 2017.  Kottelin, Thor (17 June 2008). \"Right-click \"protection\"? Forget about it\". blog.anta.net. Archived from the original on 28 July 2022. Retrieved 28 July 2022.  Rehorik, Jan (29 November 2016). \"Why You Should Never Put Sensitive Data in Your JavaScript\". ServiceObjects Blog. ServiceObjects. Archived from the original on June 3, 2019. Retrieved June 3, 2019.  Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (December 21, 2016). Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (PDF). Northeastern University. arXiv:1811.00918. doi:10.14722/ndss.2017.23414. ISBN 978-1-891562-46-4. S2CID 17885720. Archived from the original (PDF) on 29 March 2017. Retrieved 28 July 2022.  Collins, Keith (March 27, 2016). \"How one programmer broke the internet by deleting a tiny piece of code\". Quartz. Archived from the original on February 22, 2017. Retrieved February 22, 2017.  SC Magazine UK, Developer\'s 11 lines of deleted code \'breaks the internet\' Archived February 23, 2017, at the Wayback Machine  Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine  Festa, Paul (August 19, 1998). \"Buffer-overflow bug in IE\". CNET. Archived from the original on December 25, 2002.  SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine  SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine  Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine  \"Protected Mode in Vista IE7 – IEBlog\". Blogs.msdn.com. February 9, 2006. Archived from the original on January 23, 2010. Retrieved February 24, 2017.  US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine  Mozilla Foundation, Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine  Andersen, Starr (2004-08-09). \"Part 5: Enhanced Browsing Security\". TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 2021-10-20.  For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine  Gruss, Daniel; Maurice, Clémentine; Mangard, Stefan (July 24, 2015). \"Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript\". arXiv:1507.06955 [cs.CR].  Jean-Pharuns, Alix (July 30, 2015). \"Rowhammer.js Is the Most Ingenious Hack I\'ve Ever Seen\". Motherboard. Vice. Archived from the original on January 27, 2018. Retrieved January 26, 2018.  Goodin, Dan (August 4, 2015). \"DRAM \'Bitflipping\' exploit for attacking PCs: Just add JavaScript\". Ars Technica. Archived from the original on January 27, 2018. Retrieved January 26, 2018.  Auerbach, David (July 28, 2015). \"Rowhammer security exploit: Why a new security attack is truly terrifying\". slate.com. Archived from the original on July 30, 2015. Retrieved July 29, 2015.  AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017  New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017  Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack  \"Benchmark.js\". benchmarkjs.com. Archived from the original on 2016-12-19. Retrieved 2016-11-06.  JSBEN.CH. \"JSBEN.CH Performance Benchmarking Playground for JavaScript\". jsben.ch. Archived from the original on 2021-02-27. Retrieved 2021-08-13.  Eich, Brendan (April 3, 2008). \"Popularity\". Archived from the original on July 3, 2011. Retrieved January 19, 2012.  \"TypeScript: JavaScript With Syntax For Types\". Typescriptlang.org. Retrieved 2022-08-12.  \"Edge Browser Switches WebAssembly to \'On\' -- Visual Studio Magazine\". Visual Studio Magazine. Archived from the original on 2018-02-10. Retrieved 2018-02-09.  \"frequently asked questions\". asm.js. Archived from the original on June 4, 2014. Retrieved April 13, 2014. Further reading See also: ECMAScript Specification Documents Flanagan, David. JavaScript: The Definitive Guide. 7th edition. Sebastopol, California: O\'Reilly, 2020. Haverbeke, Marijn. Eloquent JavaScript. 3rd edition. No Starch Press, 2018. 472 pages. ISBN 978-1593279509.(download) Zakas, Nicholas. Principles of Object-Oriented JavaScript, 1st edition. No Starch Press, 2014. 120 pages. ISBN 978-1593275402. External links JavaScript at Wikipedia\'s sister projects Definitions from Wiktionary Media from Commons Textbooks from Wikibooks Resources from Wikiversity Documentation from MediaWiki Listen to this article (48 minutes) 48:22 Spoken Wikipedia icon This audio file was created from a revision of this article dated 20 August 2013, and does not reflect subsequent edits. (Audio help · More spoken articles) JavaScript at Curlie \"JavaScript: The First 20 Years\". Retrieved 2022-02-06. vte JavaScript vte Programming languages ComparisonTimelineHistory AdaALGOLAPLAssemblyBASICCC++C#Classic Visual BasicCOBOLErlangForthFortranGoHaskellJavaJavaScriptKotlinLispLuaMATLABMLObject PascalPascalPerlPHPPrologPythonRRubyRustSQLScratchShellSimulaSmalltalkSwiftVisual Basicmore...  Lists: AlphabeticalCategoricalGenerationalNon-English-based Category vte ECMAScript vte Web browsers vte Node.js Portal: icon Computer programming Authority control Edit this at Wikidata Categories: JavaScriptAmerican inventionsCross-platform softwareDynamically typed programming languagesFunctional languagesObject-based programming languagesHigh-level programming languagesProgramming languages created in 1995Programming languages with an ISO standardPrototype-based programming languagesScripting languagesWeb programming This page was last edited on 29 March 2023, at 06:22 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License 3.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.', 'js.jpg', '2023-04-13 13:12:27');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `contract`
--
ALTER TABLE `contract`
  ADD PRIMARY KEY (`Sn`);

--
-- Indexes for table `contracts`
--
ALTER TABLE `contracts`
  ADD PRIMARY KEY (`sno`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`Sn`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `contract`
--
ALTER TABLE `contract`
  MODIFY `Sn` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `contracts`
--
ALTER TABLE `contracts`
  MODIFY `sno` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `Sn` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
